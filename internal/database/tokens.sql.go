// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tokens.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO refresh_tokens (token, created_at, updated_at, user_id, expires_at)
VALUES (
    $1,
    $2,
    $2,
    $3,
    $4
)
RETURNING token, created_at, updated_at, user_id, expires_at, revoked_at
`

type CreateRefreshTokenParams struct {
	Token     string
	CreatedAt time.Time
	UserID    uuid.UUID
	ExpiresAt time.Time
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, createRefreshToken,
		arg.Token,
		arg.CreatedAt,
		arg.UserID,
		arg.ExpiresAt,
	)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const deletToken = `-- name: DeletToken :exec
DELETE FROM refresh_tokens 
WHERE token=$1
`

func (q *Queries) DeletToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, deletToken, token)
	return err
}

const getUserByToken = `-- name: GetUserByToken :one
SELECT user_id FROM refresh_tokens
WHERE token=$1 AND expires_at>$2 AND revoked_at IS NULL
`

type GetUserByTokenParams struct {
	Token     string
	ExpiresAt time.Time
}

func (q *Queries) GetUserByToken(ctx context.Context, arg GetUserByTokenParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getUserByToken, arg.Token, arg.ExpiresAt)
	var user_id uuid.UUID
	err := row.Scan(&user_id)
	return user_id, err
}

const revokeToken = `-- name: RevokeToken :exec
UPDATE refresh_tokens 
SET revoked_at=$2, updated_at=$2
WHERE token=$1
`

type RevokeTokenParams struct {
	Token     string
	RevokedAt sql.NullTime
}

func (q *Queries) RevokeToken(ctx context.Context, arg RevokeTokenParams) error {
	_, err := q.db.ExecContext(ctx, revokeToken, arg.Token, arg.RevokedAt)
	return err
}
